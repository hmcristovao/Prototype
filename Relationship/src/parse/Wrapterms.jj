/*  Wrapterms.jj  -  It wraps terms to SPARQL query */ 
options {
  DEBUG_PARSER = false;
  DEBUG_TOKEN_MANAGER = false;
  STATIC = false;
}
PARSER_BEGIN(Wrapterms)
package parse;

import java.io.*;
import main.*;
import user.*;
import rdf.*;
import map.*; 

public class Wrapterms {
   public static void main(String args[])  throws Exception {
      Wrapterms firstParser = null;
	  MainProcess.body(firstParser);
   }
}
PARSER_END(Wrapterms)
TOKEN : {
      < ARROW:          "->" > |
      < CHARACTER:      ["a"-"z","A"-"Z","0"-"9","_",":","#","."] > |
      < TERM:           < CHARACTER > 
                        (
                          ( < CHARACTER > | " " | < CHARACTER > "-" )*
                            < CHARACTER >
                        )?
      > |
      < SEPARATORS:  ( "\n" | "\r" | "\t" | "," | ";" | "/" | " " )+ > 
 }
/*
Grammar (read of user terms):
parseUserTerms        ->  ( element() )*  < EOF > 
element               ->  < TERM > ( < SEPARATORS > )*

Grammar (read of link vocabulary):
parseSystemVocabulary ->  ( line() )*  < EOF >
line                  ->  < TERM > < ARROW > < TERM > ( < SEPARATORS > )*

*/

void parseUserTerms(SetQuerySparql originalSetQuerySparql) : {} 
{
   ( element(originalSetQuerySparql) )* < EOF >
}
void element(SetQuerySparql originalSetQuerySparql) : {Token token; Concept concept;}  
{
	token = < TERM >
    {		concept = new Concept(token);
		originalSetQuerySparql.insertQuerySparql(concept);
		// copy the concept to static attribute in root class:
		WholeSystem.getConceptsRegister().add(concept);			
    }
    ( < SEPARATORS > )*
}

void parseSystemVocabulary(VocabularyTable vocabularyTable) : {} 
{
   ( line(vocabularyTable) )* < EOF >
}
void line(VocabularyTable vocabularyTable) : {Token tokenLeft; Token tokenRight;}  
{
	tokenLeft = < TERM > (< SEPARATORS >)* < ARROW > (< SEPARATORS >)* tokenRight = < TERM > 
    {
		vocabularyTable.put(tokenLeft,tokenRight);
    }
    ( < SEPARATORS > )*
}

