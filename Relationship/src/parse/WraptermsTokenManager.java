/* Generated By:JavaCC: Do not edit this line. WraptermsTokenManager.java */
package parse;
import java.io.*;
import main.*;
import user.*;
import rdf.*;
import map.*;
import graph.*;

/** Token Manager. */
public class WraptermsTokenManager implements WraptermsConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x8000000000000L) != 0L)
            return 9;
         if ((active0 & 0xfffffffffff0L) != 0L)
         {
            jjmatchedKind = 55;
            return 10;
         }
         return -1;
      case 1:
         if ((active0 & 0xfffffffffff0L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 1;
            return 10;
         }
         return -1;
      case 2:
         if ((active0 & 0xfffffffffff0L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 2;
            return 10;
         }
         return -1;
      case 3:
         if ((active0 & 0xfffffffffff0L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 3;
            return 10;
         }
         return -1;
      case 4:
         if ((active0 & 0xfffffffffff0L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 4;
            return 10;
         }
         return -1;
      case 5:
         if ((active0 & 0xfffffffffff0L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 5;
            return 10;
         }
         return -1;
      case 6:
         if ((active0 & 0xfffffffffff0L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 6;
            return 10;
         }
         return -1;
      case 7:
         if ((active0 & 0xfffffffffff0L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 7;
            return 10;
         }
         return -1;
      case 8:
         if ((active0 & 0xfffffffffff0L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 8;
            return 10;
         }
         return -1;
      case 9:
         if ((active0 & 0xfffffbfffff0L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 9;
            return 10;
         }
         if ((active0 & 0x4000000L) != 0L)
            return 10;
         return -1;
      case 10:
         if ((active0 & 0xfffffbfffbf0L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 10;
            return 10;
         }
         if ((active0 & 0x400L) != 0L)
            return 10;
         return -1;
      case 11:
         if ((active0 & 0x100L) != 0L)
            return 10;
         if ((active0 & 0xfffffbfffaf0L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 11;
            return 10;
         }
         return -1;
      case 12:
         if ((active0 & 0xfbfff9ffeaf0L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 12;
            return 10;
         }
         if ((active0 & 0x40002001000L) != 0L)
            return 10;
         return -1;
      case 13:
         if ((active0 & 0xfbfff97feae0L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 13;
            return 10;
         }
         if ((active0 & 0x800010L) != 0L)
            return 10;
         return -1;
      case 14:
         if ((active0 & 0xfbfff97feae0L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 14;
            return 10;
         }
         return -1;
      case 15:
         if ((active0 & 0xfbfff97feae0L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 15;
            return 10;
         }
         return -1;
      case 16:
         if ((active0 & 0x80000020L) != 0L)
            return 10;
         if ((active0 & 0xfbff797feac0L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 16;
            return 10;
         }
         return -1;
      case 17:
         if ((active0 & 0xf3fd797feac0L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 17;
            return 10;
         }
         if ((active0 & 0x80200000000L) != 0L)
            return 10;
         return -1;
      case 18:
         if ((active0 & 0xf3bd797eeac0L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 18;
            return 10;
         }
         if ((active0 & 0x4000010000L) != 0L)
            return 10;
         return -1;
      case 19:
         if ((active0 & 0x810100400000L) != 0L)
            return 10;
         if ((active0 & 0x72bc793eeac0L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 19;
            return 10;
         }
         return -1;
      case 20:
         if ((active0 & 0x72247918eac0L) != 0L)
         {
            if (jjmatchedPos != 20)
            {
               jjmatchedKind = 55;
               jjmatchedPos = 20;
            }
            return 10;
         }
         if ((active0 & 0x9800260000L) != 0L)
            return 10;
         return -1;
      case 21:
         if ((active0 & 0x202001000000L) != 0L)
            return 10;
         if ((active0 & 0x5204781ceac0L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 21;
            return 10;
         }
         return -1;
      case 22:
         if ((active0 & 0x5000780ceac0L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 22;
            return 10;
         }
         if ((active0 & 0x20400100000L) != 0L)
            return 10;
         return -1;
      case 23:
         if ((active0 & 0x4000680ceac0L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 23;
            return 10;
         }
         if ((active0 & 0x100010000000L) != 0L)
            return 10;
         return -1;
      case 24:
         if ((active0 & 0x4000680ceac0L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 24;
            return 10;
         }
         return -1;
      case 25:
         if ((active0 & 0x4000680ceac0L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 25;
            return 10;
         }
         return -1;
      case 26:
         if ((active0 & 0x4000680ceac0L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 26;
            return 10;
         }
         return -1;
      case 27:
         if ((active0 & 0x4000680ceac0L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 27;
            return 10;
         }
         return -1;
      case 28:
         if ((active0 & 0x40006804eac0L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 28;
            return 10;
         }
         if ((active0 & 0x80000L) != 0L)
            return 10;
         return -1;
      case 29:
         if ((active0 & 0x60040000L) != 0L)
            return 10;
         if ((active0 & 0x40000800eac0L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 29;
            return 10;
         }
         return -1;
      case 30:
         if ((active0 & 0x40000800e2c0L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 30;
            return 10;
         }
         if ((active0 & 0x800L) != 0L)
            return 10;
         return -1;
      case 31:
         if ((active0 & 0x40000800e2c0L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 31;
            return 10;
         }
         return -1;
      case 32:
         if ((active0 & 0x4000000020c0L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 32;
            return 10;
         }
         if ((active0 & 0x800c200L) != 0L)
            return 10;
         return -1;
      case 33:
         if ((active0 & 0x400000000000L) != 0L)
            return 10;
         if ((active0 & 0x20c0L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 33;
            return 10;
         }
         return -1;
      case 34:
         if ((active0 & 0x20c0L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 34;
            return 10;
         }
         return -1;
      case 35:
         if ((active0 & 0x20c0L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 35;
            return 10;
         }
         return -1;
      case 36:
         if ((active0 & 0x20c0L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 36;
            return 10;
         }
         return -1;
      case 37:
         if ((active0 & 0x20c0L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 37;
            return 10;
         }
         return -1;
      case 38:
         if ((active0 & 0x20c0L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 38;
            return 10;
         }
         return -1;
      case 39:
         if ((active0 & 0x20c0L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 39;
            return 10;
         }
         return -1;
      case 40:
         if ((active0 & 0x20c0L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 40;
            return 10;
         }
         return -1;
      case 41:
         if ((active0 & 0x20c0L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 41;
            return 10;
         }
         return -1;
      case 42:
         if ((active0 & 0xc0L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 42;
            return 10;
         }
         if ((active0 & 0x2000L) != 0L)
            return 10;
         return -1;
      case 43:
         if ((active0 & 0x40L) != 0L)
            return 10;
         if ((active0 & 0x80L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 43;
            return 10;
         }
         return -1;
      case 44:
         if ((active0 & 0x80L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 44;
            return 10;
         }
         return -1;
      case 45:
         if ((active0 & 0x80L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 45;
            return 10;
         }
         return -1;
      case 46:
         if ((active0 & 0x80L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 46;
            return 10;
         }
         return -1;
      case 47:
         if ((active0 & 0x80L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 47;
            return 10;
         }
         return -1;
      case 48:
         if ((active0 & 0x80L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 48;
            return 10;
         }
         return -1;
      case 49:
         if ((active0 & 0x80L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 49;
            return 10;
         }
         return -1;
      case 50:
         if ((active0 & 0x80L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 50;
            return 10;
         }
         return -1;
      case 51:
         if ((active0 & 0x80L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 51;
            return 10;
         }
         return -1;
      case 52:
         if ((active0 & 0x80L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 52;
            return 10;
         }
         return -1;
      case 53:
         if ((active0 & 0x80L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 53;
            return 10;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 32:
         return jjStartNfaWithStates_0(0, 51, 9);
      case 45:
         return jjMoveStringLiteralDfa1_0(0x10000000000000L);
      case 47:
         return jjMoveStringLiteralDfa1_0(0x2L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x200L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x60000000L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x18000L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x60000000000L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x180000000000L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0xa0000f002000L);
      case 107:
         return jjMoveStringLiteralDfa1_0(0x400L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x9001c0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x1ff80001030L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x400000000000L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x6e0000L);
      case 113:
         return jjMoveStringLiteralDfa1_0(0x10004800L);
      default :
         return jjMoveNfa_0(5, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x2L) != 0L)
            return jjStopAtPos(1, 1);
         break;
      case 62:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStopAtPos(1, 52);
         break;
      case 67:
         return jjMoveStringLiteralDfa2_0(active0, 0x400L);
      case 68:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x1ffa0900120L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000000L);
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0x200L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000000L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000c0L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x40018000L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x5000006e0000L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0xa0000f000000L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x10004810L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 66:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000L);
      case 69:
         return jjMoveStringLiteralDfa3_0(active0, 0x800002000000L);
      case 70:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000L);
      case 75:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000L);
      case 83:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x100010004800L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000L);
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0x200L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x483000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x1ff80000030L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x180c0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x260400L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0xc0000000000L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x20040000000L);
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0x900100L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 66:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000L);
      case 69:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000L);
      case 73:
         return jjMoveStringLiteralDfa4_0(active0, 0x1c0L);
      case 82:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x10L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x498000L);
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000L);
      case 101:
         return jjMoveStringLiteralDfa4_0(active0, 0x5ff8d000020L);
      case 103:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000001000L);
      case 104:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x200002000200L);
      case 107:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000L);
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x800010004800L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000260000L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x2400L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa5_0(active0, 0x1b000000000L);
      case 71:
         return jjMoveStringLiteralDfa5_0(active0, 0xa0000000L);
      case 81:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000L);
      case 83:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000L);
      case 84:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000L);
      case 85:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000020L);
      case 86:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000002000L);
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0x60000000000L);
      case 101:
         return jjMoveStringLiteralDfa5_0(active0, 0x48118410L);
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000L);
      case 104:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x480000c80000L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x260000L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x11004bc0L);
      case 120:
         return jjMoveStringLiteralDfa5_0(active0, 0x200000000000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 66:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000000L);
      case 70:
         return jjMoveStringLiteralDfa6_0(active0, 0x400L);
      case 83:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000000L);
      case 86:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000000L);
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000000L);
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0x860011c0L);
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000000L);
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000L);
      case 104:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x40010004a00L);
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000000L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x1a200000000L);
      case 112:
         return jjMoveStringLiteralDfa6_0(active0, 0x8018000L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x60260010L);
      case 115:
         return jjMoveStringLiteralDfa6_0(active0, 0x400480020L);
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0x102000L);
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000L);
      case 119:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000L);
      case 120:
         return jjMoveStringLiteralDfa6_0(active0, 0x1800000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 70:
         return jjMoveStringLiteralDfa7_0(active0, 0x10L);
      case 78:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000L);
      case 84:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000000L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x440000000000L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x204260000L);
      case 101:
         return jjMoveStringLiteralDfa7_0(active0, 0x501801020L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000482400L);
      case 108:
         return jjMoveStringLiteralDfa7_0(active0, 0x801000000000L);
      case 109:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000L);
      case 110:
         return jjMoveStringLiteralDfa7_0(active0, 0x18002000000L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x4020000200L);
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0x1c0L);
      case 115:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000000L);
      case 116:
         return jjMoveStringLiteralDfa7_0(active0, 0x10081001c800L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000000L);
      case 119:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000L);
      case 120:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa8_0(active0, 0x1800000000L);
      case 70:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000L);
      case 80:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000000000L);
      case 83:
         return jjMoveStringLiteralDfa8_0(active0, 0x40000000000L);
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000001c0L);
      case 101:
         return jjMoveStringLiteralDfa8_0(active0, 0x800009100000L);
      case 102:
         return jjMoveStringLiteralDfa8_0(active0, 0x80000000L);
      case 103:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000000000L);
      case 104:
         return jjMoveStringLiteralDfa8_0(active0, 0x40000000L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x260010L);
      case 108:
         return jjMoveStringLiteralDfa8_0(active0, 0x400400000400L);
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x800200L);
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x482000L);
      case 112:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000000L);
      case 114:
         return jjMoveStringLiteralDfa8_0(active0, 0x104100000020L);
      case 115:
         return jjMoveStringLiteralDfa8_0(active0, 0x98000018000L);
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000L);
      case 117:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000000L);
      case 118:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000L);
      case 121:
         return jjMoveStringLiteralDfa8_0(active0, 0x10004800L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa9_0(active0, 0x400000000000L);
      case 71:
         return jjMoveStringLiteralDfa9_0(active0, 0x80000000L);
      case 73:
         return jjMoveStringLiteralDfa9_0(active0, 0x200000000000L);
      case 77:
         return jjMoveStringLiteralDfa9_0(active0, 0x10000L);
      case 78:
         return jjMoveStringLiteralDfa9_0(active0, 0x10004a00L);
      case 81:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000L);
      case 84:
         return jjMoveStringLiteralDfa9_0(active0, 0x20L);
      case 85:
         return jjMoveStringLiteralDfa9_0(active0, 0x800000000000L);
      case 98:
         return jjMoveStringLiteralDfa9_0(active0, 0x200000000L);
      case 101:
         return jjMoveStringLiteralDfa9_0(active0, 0x160406100000L);
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x48001000L);
      case 108:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000010L);
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0x21482000L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x19800260000L);
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x40000005c0L);
      case 117:
         return jjMoveStringLiteralDfa9_0(active0, 0x80000000000L);
      case 118:
         return jjMoveStringLiteralDfa9_0(active0, 0x800000L);
      case 121:
         return jjMoveStringLiteralDfa9_0(active0, 0x100000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 66:
         return jjMoveStringLiteralDfa10_0(active0, 0x80000L);
      case 68:
         return jjMoveStringLiteralDfa10_0(active0, 0x100000000L);
      case 69:
         return jjMoveStringLiteralDfa10_0(active0, 0x400000L);
      case 82:
         return jjMoveStringLiteralDfa10_0(active0, 0x4000000000L);
      case 84:
         return jjMoveStringLiteralDfa10_0(active0, 0x2000L);
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0x180000000000L);
      case 99:
         return jjMoveStringLiteralDfa10_0(active0, 0x42000000L);
      case 100:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(9, 26, 10);
         return jjMoveStringLiteralDfa10_0(active0, 0x20000000L);
      case 101:
         return jjMoveStringLiteralDfa10_0(active0, 0x2000800630L);
      case 103:
         return jjMoveStringLiteralDfa10_0(active0, 0x8000000L);
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0x101c0L);
      case 108:
         return jjMoveStringLiteralDfa10_0(active0, 0x18000001000L);
      case 110:
         return jjMoveStringLiteralDfa10_0(active0, 0x201801360000L);
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x400010004800L);
      case 114:
         return jjMoveStringLiteralDfa10_0(active0, 0x60080000000L);
      case 115:
         return jjMoveStringLiteralDfa10_0(active0, 0x800400000000L);
      case 117:
         return jjMoveStringLiteralDfa10_0(active0, 0x200008000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 66:
         return jjMoveStringLiteralDfa11_0(active0, 0x60000L);
      case 69:
         return jjMoveStringLiteralDfa11_0(active0, 0x200000L);
      case 71:
         return jjMoveStringLiteralDfa11_0(active0, 0x200000000000L);
      case 85:
         return jjMoveStringLiteralDfa11_0(active0, 0x10L);
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0x80008000L);
      case 99:
         return jjMoveStringLiteralDfa11_0(active0, 0x1820800000L);
      case 100:
         return jjMoveStringLiteralDfa11_0(active0, 0x10004800L);
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0x81c101080000L);
      case 104:
         return jjMoveStringLiteralDfa11_0(active0, 0x8000000L);
      case 105:
         return jjMoveStringLiteralDfa11_0(active0, 0x400000L);
      case 107:
         return jjMoveStringLiteralDfa11_0(active0, 0x40000000L);
      case 108:
         return jjMoveStringLiteralDfa11_0(active0, 0x80200000000L);
      case 109:
         return jjMoveStringLiteralDfa11_0(active0, 0x100000000000L);
      case 110:
         return jjMoveStringLiteralDfa11_0(active0, 0x400000110000L);
      case 111:
         return jjMoveStringLiteralDfa11_0(active0, 0x1c0L);
      case 114:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(10, 10, 10);
         return jjMoveStringLiteralDfa11_0(active0, 0x2020L);
      case 115:
         return jjMoveStringLiteralDfa11_0(active0, 0x20400000000L);
      case 116:
         return jjMoveStringLiteralDfa11_0(active0, 0x2002001000L);
      case 118:
         return jjMoveStringLiteralDfa11_0(active0, 0x40000000000L);
      case 119:
         return jjMoveStringLiteralDfa11_0(active0, 0x200L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa12_0(active0, 0x400000200L);
      case 69:
         return jjMoveStringLiteralDfa12_0(active0, 0x10000000000L);
      case 77:
         return jjMoveStringLiteralDfa12_0(active0, 0x10000L);
      case 82:
         return jjMoveStringLiteralDfa12_0(active0, 0x8000000000L);
      case 86:
         return jjMoveStringLiteralDfa12_0(active0, 0x100000000000L);
      case 97:
         return jjMoveStringLiteralDfa12_0(active0, 0x200000000L);
      case 98:
         return jjMoveStringLiteralDfa12_0(active0, 0x8000000L);
      case 99:
         return jjMoveStringLiteralDfa12_0(active0, 0x400000000000L);
      case 101:
         return jjMoveStringLiteralDfa12_0(active0, 0x243810165800L);
      case 102:
         return jjMoveStringLiteralDfa12_0(active0, 0x100000000L);
      case 103:
         return jjMoveStringLiteralDfa12_0(active0, 0x400000L);
      case 105:
         return jjMoveStringLiteralDfa12_0(active0, 0xa0000202000L);
      case 108:
         return jjMoveStringLiteralDfa12_0(active0, 0x800000000000L);
      case 109:
         return jjMoveStringLiteralDfa12_0(active0, 0x20L);
      case 110:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(11, 8, 10);
         return jjMoveStringLiteralDfa12_0(active0, 0x400080c0L);
      case 111:
         return jjMoveStringLiteralDfa12_0(active0, 0x22000000L);
      case 112:
         return jjMoveStringLiteralDfa12_0(active0, 0x4080000000L);
      case 115:
         return jjMoveStringLiteralDfa12_0(active0, 0x1000010L);
      case 116:
         return jjMoveStringLiteralDfa12_0(active0, 0x880000L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(10, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0);
      return 12;
   }
   switch(curChar)
   {
      case 82:
         return jjMoveStringLiteralDfa13_0(active0, 0x2000000000L);
      case 84:
         return jjMoveStringLiteralDfa13_0(active0, 0xc0L);
      case 97:
         return jjMoveStringLiteralDfa13_0(active0, 0x100010000L);
      case 101:
         return jjMoveStringLiteralDfa13_0(active0, 0xc08040400010L);
      case 103:
         return jjMoveStringLiteralDfa13_0(active0, 0x202000L);
      case 104:
         return jjMoveStringLiteralDfa13_0(active0, 0x80000000L);
      case 105:
         return jjMoveStringLiteralDfa13_0(active0, 0x100000000000L);
      case 108:
         return jjMoveStringLiteralDfa13_0(active0, 0x20000000L);
      case 111:
         return jjMoveStringLiteralDfa13_0(active0, 0x4408800200L);
      case 112:
         return jjMoveStringLiteralDfa13_0(active0, 0x201800000000L);
      case 114:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(12, 12, 10);
         else if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(12, 25, 10);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 42, 10);
         return jjMoveStringLiteralDfa13_0(active0, 0x10200000000L);
      case 115:
         return jjMoveStringLiteralDfa13_0(active0, 0x20011104820L);
      case 116:
         return jjMoveStringLiteralDfa13_0(active0, 0x68000L);
      case 119:
         return jjMoveStringLiteralDfa13_0(active0, 0x80000L);
      case 122:
         return jjMoveStringLiteralDfa13_0(active0, 0x80000000000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(11, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0);
      return 13;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa14_0(active0, 0x1000000L);
      case 70:
         return jjMoveStringLiteralDfa14_0(active0, 0x80000020L);
      case 83:
         return jjMoveStringLiteralDfa14_0(active0, 0x10000000L);
      case 84:
         return jjMoveStringLiteralDfa14_0(active0, 0x4800L);
      case 97:
         return jjMoveStringLiteralDfa14_0(active0, 0x80000000000L);
      case 101:
         return jjMoveStringLiteralDfa14_0(active0, 0x2000280000L);
      case 103:
         return jjMoveStringLiteralDfa14_0(active0, 0x2000L);
      case 104:
         return jjMoveStringLiteralDfa14_0(active0, 0x200000000000L);
      case 105:
         return jjMoveStringLiteralDfa14_0(active0, 0x8000L);
      case 110:
         return jjMoveStringLiteralDfa14_0(active0, 0x400400200L);
      case 111:
         return jjMoveStringLiteralDfa14_0(active0, 0x200000c0L);
      case 112:
         return jjMoveStringLiteralDfa14_0(active0, 0x408000000000L);
      case 114:
         if ((active0 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(13, 4, 10);
         else if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(13, 23, 10);
         return jjMoveStringLiteralDfa14_0(active0, 0x14008000000L);
      case 115:
         return jjMoveStringLiteralDfa14_0(active0, 0x900040100000L);
      case 116:
         return jjMoveStringLiteralDfa14_0(active0, 0x21800000000L);
      case 117:
         return jjMoveStringLiteralDfa14_0(active0, 0x100000000L);
      case 119:
         return jjMoveStringLiteralDfa14_0(active0, 0x60000L);
      case 120:
         return jjMoveStringLiteralDfa14_0(active0, 0x10000L);
      case 121:
         return jjMoveStringLiteralDfa14_0(active0, 0x200000000L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0);
}
private int jjMoveStringLiteralDfa14_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(12, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0);
      return 14;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa15_0(active0, 0x100000L);
      case 70:
         return jjMoveStringLiteralDfa15_0(active0, 0x200000000L);
      case 77:
         return jjMoveStringLiteralDfa15_0(active0, 0x1800000000L);
      case 82:
         return jjMoveStringLiteralDfa15_0(active0, 0x10000L);
      case 86:
         return jjMoveStringLiteralDfa15_0(active0, 0xc0L);
      case 99:
         return jjMoveStringLiteralDfa15_0(active0, 0x400000200L);
      case 101:
         return jjMoveStringLiteralDfa15_0(active0, 0x200000e2000L);
      case 104:
         return jjMoveStringLiteralDfa15_0(active0, 0x10000000L);
      case 105:
         return jjMoveStringLiteralDfa15_0(active0, 0x200080000020L);
      case 108:
         return jjMoveStringLiteralDfa15_0(active0, 0x101000000L);
      case 110:
         return jjMoveStringLiteralDfa15_0(active0, 0x200000L);
      case 111:
         return jjMoveStringLiteralDfa15_0(active0, 0x18000004800L);
      case 112:
         return jjMoveStringLiteralDfa15_0(active0, 0x2000000000L);
      case 114:
         return jjMoveStringLiteralDfa15_0(active0, 0x20000000L);
      case 115:
         return jjMoveStringLiteralDfa15_0(active0, 0x800048000000L);
      case 116:
         return jjMoveStringLiteralDfa15_0(active0, 0x484000008000L);
      case 117:
         return jjMoveStringLiteralDfa15_0(active0, 0x100000000000L);
      case 118:
         return jjMoveStringLiteralDfa15_0(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_0(13, active0);
}
private int jjMoveStringLiteralDfa15_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(13, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0);
      return 15;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa16_0(active0, 0x4800L);
      case 67:
         return jjMoveStringLiteralDfa16_0(active0, 0x40000000L);
      case 70:
         return jjMoveStringLiteralDfa16_0(active0, 0x4000000000L);
      case 79:
         return jjMoveStringLiteralDfa16_0(active0, 0x28000000L);
      case 84:
         return jjMoveStringLiteralDfa16_0(active0, 0xa00000000000L);
      case 87:
         return jjMoveStringLiteralDfa16_0(active0, 0x400000000000L);
      case 97:
         return jjMoveStringLiteralDfa16_0(active0, 0x101800010000L);
      case 101:
         return jjMoveStringLiteralDfa16_0(active0, 0x4004602c0L);
      case 105:
         return jjMoveStringLiteralDfa16_0(active0, 0x80200000000L);
      case 108:
         return jjMoveStringLiteralDfa16_0(active0, 0x80100020L);
      case 110:
         return jjMoveStringLiteralDfa16_0(active0, 0x20000080000L);
      case 111:
         return jjMoveStringLiteralDfa16_0(active0, 0x2011000000L);
      case 114:
         return jjMoveStringLiteralDfa16_0(active0, 0x18000002000L);
      case 116:
         return jjMoveStringLiteralDfa16_0(active0, 0x100000000L);
      case 118:
         return jjMoveStringLiteralDfa16_0(active0, 0x200000L);
      case 121:
         return jjMoveStringLiteralDfa16_0(active0, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0);
}
private int jjMoveStringLiteralDfa16_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(14, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0);
      return 16;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa17_0(active0, 0x2000L);
      case 67:
         return jjMoveStringLiteralDfa17_0(active0, 0x8000L);
      case 70:
         return jjMoveStringLiteralDfa17_0(active0, 0x10100000000L);
      case 97:
         return jjMoveStringLiteralDfa17_0(active0, 0x800000000000L);
      case 99:
         return jjMoveStringLiteralDfa17_0(active0, 0x20000400000L);
      case 101:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(16, 5, 10);
         else if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(16, 31, 10);
         return jjMoveStringLiteralDfa17_0(active0, 0x200000L);
      case 102:
         return jjMoveStringLiteralDfa17_0(active0, 0x8000000L);
      case 105:
         return jjMoveStringLiteralDfa17_0(active0, 0x404000000000L);
      case 108:
         return jjMoveStringLiteralDfa17_0(active0, 0x100200000000L);
      case 110:
         return jjMoveStringLiteralDfa17_0(active0, 0xf0000L);
      case 111:
         return jjMoveStringLiteralDfa17_0(active0, 0x280040100000L);
      case 112:
         return jjMoveStringLiteralDfa17_0(active0, 0x1c00004a00L);
      case 114:
         return jjMoveStringLiteralDfa17_0(active0, 0x20300000c0L);
      case 115:
         return jjMoveStringLiteralDfa17_0(active0, 0x1000000L);
      case 116:
         return jjMoveStringLiteralDfa17_0(active0, 0x8000000000L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0);
}
private int jjMoveStringLiteralDfa17_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(15, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, active0);
      return 17;
   }
   switch(curChar)
   {
      case 70:
         return jjMoveStringLiteralDfa18_0(active0, 0x9800000000L);
      case 79:
         return jjMoveStringLiteralDfa18_0(active0, 0x8000000L);
      case 97:
         return jjMoveStringLiteralDfa18_0(active0, 0x8000L);
      case 98:
         return jjMoveStringLiteralDfa18_0(active0, 0x800000000000L);
      case 99:
         return jjMoveStringLiteralDfa18_0(active0, 0x200000L);
      case 101:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(17, 33, 10);
         return jjMoveStringLiteralDfa18_0(active0, 0x20001080000L);
      case 103:
         return jjMoveStringLiteralDfa18_0(active0, 0x10000L);
      case 105:
         return jjMoveStringLiteralDfa18_0(active0, 0x1101200000c0L);
      case 108:
         return jjMoveStringLiteralDfa18_0(active0, 0x4000000000L);
      case 110:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(17, 43, 10);
         return jjMoveStringLiteralDfa18_0(active0, 0x40060000L);
      case 111:
         return jjMoveStringLiteralDfa18_0(active0, 0x200000000000L);
      case 112:
         return jjMoveStringLiteralDfa18_0(active0, 0x6800L);
      case 115:
         return jjMoveStringLiteralDfa18_0(active0, 0x100000L);
      case 116:
         return jjMoveStringLiteralDfa18_0(active0, 0x402410400200L);
      default :
         break;
   }
   return jjStartNfa_0(16, active0);
}
private int jjMoveStringLiteralDfa18_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(16, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(17, active0);
      return 18;
   }
   switch(curChar)
   {
      case 70:
         return jjMoveStringLiteralDfa19_0(active0, 0x22000000000L);
      case 82:
         return jjMoveStringLiteralDfa19_0(active0, 0x10000000L);
      case 87:
         return jjMoveStringLiteralDfa19_0(active0, 0x200L);
      case 99:
         return jjMoveStringLiteralDfa19_0(active0, 0x40000000L);
      case 101:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(18, 16, 10);
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(18, 38, 10);
         return jjMoveStringLiteralDfa19_0(active0, 0x160000L);
      case 102:
         return jjMoveStringLiteralDfa19_0(active0, 0xc0L);
      case 103:
         return jjMoveStringLiteralDfa19_0(active0, 0x20000000L);
      case 104:
         return jjMoveStringLiteralDfa19_0(active0, 0x400000000000L);
      case 105:
         return jjMoveStringLiteralDfa19_0(active0, 0x9800000000L);
      case 108:
         return jjMoveStringLiteralDfa19_0(active0, 0xa1010000c800L);
      case 110:
         return jjMoveStringLiteralDfa19_0(active0, 0x1000000L);
      case 111:
         return jjMoveStringLiteralDfa19_0(active0, 0x400000L);
      case 112:
         return jjMoveStringLiteralDfa19_0(active0, 0x2000L);
      case 114:
         return jjMoveStringLiteralDfa19_0(active0, 0x8000000L);
      case 115:
         return jjMoveStringLiteralDfa19_0(active0, 0x400080000L);
      case 116:
         return jjMoveStringLiteralDfa19_0(active0, 0x200000L);
      case 122:
         return jjMoveStringLiteralDfa19_0(active0, 0x100000000000L);
      default :
         break;
   }
   return jjStartNfa_0(17, active0);
}
private int jjMoveStringLiteralDfa19_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(17, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(18, active0);
      return 19;
   }
   switch(curChar)
   {
      case 70:
         return jjMoveStringLiteralDfa20_0(active0, 0x400000000L);
      case 71:
         return jjMoveStringLiteralDfa20_0(active0, 0x400000000000L);
      case 75:
         return jjMoveStringLiteralDfa20_0(active0, 0x200000000000L);
      case 97:
         return jjMoveStringLiteralDfa20_0(active0, 0x100000000000L);
      case 99:
         return jjMoveStringLiteralDfa20_0(active0, 0x8000L);
      case 101:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(19, 32, 10);
         else if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(19, 40, 10);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(19, 47, 10);
         return jjMoveStringLiteralDfa20_0(active0, 0x51000000L);
      case 105:
         return jjMoveStringLiteralDfa20_0(active0, 0x22028000200L);
      case 108:
         return jjMoveStringLiteralDfa20_0(active0, 0x9800002000L);
      case 110:
         return jjMoveStringLiteralDfa20_0(active0, 0x100000L);
      case 111:
         return jjMoveStringLiteralDfa20_0(active0, 0x200000L);
      case 114:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(19, 22, 10);
         break;
      case 115:
         return jjMoveStringLiteralDfa20_0(active0, 0xe0000L);
      case 121:
         return jjMoveStringLiteralDfa20_0(active0, 0x48c0L);
      default :
         break;
   }
   return jjStartNfa_0(18, active0);
}
private int jjMoveStringLiteralDfa20_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(18, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(19, active0);
      return 20;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa21_0(active0, 0x80000L);
      case 75:
         return jjMoveStringLiteralDfa21_0(active0, 0x800L);
      case 78:
         return jjMoveStringLiteralDfa21_0(active0, 0x4000L);
      case 82:
         return jjMoveStringLiteralDfa21_0(active0, 0x80L);
      case 85:
         return jjMoveStringLiteralDfa21_0(active0, 0x40L);
      case 101:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(20, 35, 10);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(20, 36, 10);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(20, 39, 10);
         return jjMoveStringLiteralDfa21_0(active0, 0x400000100000L);
      case 103:
         return jjMoveStringLiteralDfa21_0(active0, 0x8000000L);
      case 105:
         return jjMoveStringLiteralDfa21_0(active0, 0x200400000000L);
      case 108:
         return jjMoveStringLiteralDfa21_0(active0, 0x22000000000L);
      case 110:
         return jjMoveStringLiteralDfa21_0(active0, 0x20000000L);
      case 112:
         return jjMoveStringLiteralDfa21_0(active0, 0x50000000L);
      case 114:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(20, 21, 10);
         break;
      case 115:
         if ((active0 & 0x20000L) != 0L)
         {
            jjmatchedKind = 17;
            jjmatchedPos = 20;
         }
         return jjMoveStringLiteralDfa21_0(active0, 0x1040000L);
      case 116:
         return jjMoveStringLiteralDfa21_0(active0, 0x100000000200L);
      case 117:
         return jjMoveStringLiteralDfa21_0(active0, 0x8000L);
      case 121:
         return jjMoveStringLiteralDfa21_0(active0, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(19, active0);
}
private int jjMoveStringLiteralDfa21_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(19, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(20, active0);
      return 21;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa22_0(active0, 0x40000L);
      case 78:
         return jjMoveStringLiteralDfa22_0(active0, 0x2000L);
      case 97:
         return jjMoveStringLiteralDfa22_0(active0, 0x20000000L);
      case 99:
         return jjMoveStringLiteralDfa22_0(active0, 0x800L);
      case 100:
         return jjMoveStringLiteralDfa22_0(active0, 0x4000L);
      case 101:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(21, 37, 10);
         return jjMoveStringLiteralDfa22_0(active0, 0x20000000080L);
      case 104:
         return jjMoveStringLiteralDfa22_0(active0, 0x200L);
      case 105:
         return jjMoveStringLiteralDfa22_0(active0, 0x100008000000L);
      case 108:
         return jjMoveStringLiteralDfa22_0(active0, 0x400088000L);
      case 110:
         return jjMoveStringLiteralDfa22_0(active0, 0x40L);
      case 111:
         return jjMoveStringLiteralDfa22_0(active0, 0x10000000L);
      case 112:
         return jjMoveStringLiteralDfa22_0(active0, 0x400000000000L);
      case 115:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(21, 24, 10);
         return jjMoveStringLiteralDfa22_0(active0, 0x100000L);
      case 116:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(21, 45, 10);
         return jjMoveStringLiteralDfa22_0(active0, 0x40000000L);
      default :
         break;
   }
   return jjStartNfa_0(20, active0);
}
private int jjMoveStringLiteralDfa22_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(20, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(21, active0);
      return 22;
   }
   switch(curChar)
   {
      case 68:
         return jjMoveStringLiteralDfa23_0(active0, 0x2000L);
      case 87:
         return jjMoveStringLiteralDfa23_0(active0, 0x40000000L);
      case 97:
         return jjMoveStringLiteralDfa23_0(active0, 0x8000L);
      case 101:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(22, 34, 10);
         return jjMoveStringLiteralDfa23_0(active0, 0x4000L);
      case 104:
         return jjMoveStringLiteralDfa23_0(active0, 0x400000000000L);
      case 105:
         return jjMoveStringLiteralDfa23_0(active0, 0x40L);
      case 108:
         return jjMoveStringLiteralDfa23_0(active0, 0x20040080L);
      case 110:
         return jjMoveStringLiteralDfa23_0(active0, 0x8000000L);
      case 111:
         return jjMoveStringLiteralDfa23_0(active0, 0x100000080a00L);
      case 114:
         return jjMoveStringLiteralDfa23_0(active0, 0x10000000L);
      case 115:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(22, 20, 10);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(22, 41, 10);
         break;
      default :
         break;
   }
   return jjStartNfa_0(21, active0);
}
private int jjMoveStringLiteralDfa23_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(21, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(22, active0);
      return 23;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa24_0(active0, 0x20000000L);
      case 97:
         return jjMoveStringLiteralDfa24_0(active0, 0x8000080L);
      case 101:
         return jjMoveStringLiteralDfa24_0(active0, 0x2000L);
      case 103:
         return jjMoveStringLiteralDfa24_0(active0, 0x4000L);
      case 105:
         return jjMoveStringLiteralDfa24_0(active0, 0x400040000000L);
      case 110:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(23, 44, 10);
         break;
      case 111:
         return jjMoveStringLiteralDfa24_0(active0, 0x40000L);
      case 113:
         return jjMoveStringLiteralDfa24_0(active0, 0x40L);
      case 114:
         return jjMoveStringLiteralDfa24_0(active0, 0x800L);
      case 115:
         return jjMoveStringLiteralDfa24_0(active0, 0x80000L);
      case 116:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(23, 28, 10);
         return jjMoveStringLiteralDfa24_0(active0, 0x8000L);
      case 117:
         return jjMoveStringLiteralDfa24_0(active0, 0x200L);
      default :
         break;
   }
   return jjStartNfa_0(22, active0);
}
private int jjMoveStringLiteralDfa24_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(22, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(23, active0);
      return 24;
   }
   switch(curChar)
   {
      case 84:
         return jjMoveStringLiteralDfa25_0(active0, 0x400000000000L);
      case 101:
         return jjMoveStringLiteralDfa25_0(active0, 0x80800L);
      case 103:
         return jjMoveStringLiteralDfa25_0(active0, 0x2000L);
      case 105:
         return jjMoveStringLiteralDfa25_0(active0, 0x8000L);
      case 108:
         return jjMoveStringLiteralDfa25_0(active0, 0x8000000L);
      case 111:
         return jjMoveStringLiteralDfa25_0(active0, 0x20000000L);
      case 114:
         return jjMoveStringLiteralDfa25_0(active0, 0x4000L);
      case 115:
         return jjMoveStringLiteralDfa25_0(active0, 0x40000L);
      case 116:
         return jjMoveStringLiteralDfa25_0(active0, 0x40000280L);
      case 117:
         return jjMoveStringLiteralDfa25_0(active0, 0x40L);
      default :
         break;
   }
   return jjStartNfa_0(23, active0);
}
private int jjMoveStringLiteralDfa25_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(23, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(24, active0);
      return 25;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa26_0(active0, 0x8000200L);
      case 70:
         return jjMoveStringLiteralDfa26_0(active0, 0x800L);
      case 101:
         return jjMoveStringLiteralDfa26_0(active0, 0x44040L);
      case 104:
         return jjMoveStringLiteralDfa26_0(active0, 0x40000000L);
      case 105:
         return jjMoveStringLiteralDfa26_0(active0, 0x80L);
      case 110:
         return jjMoveStringLiteralDfa26_0(active0, 0x20080000L);
      case 111:
         return jjMoveStringLiteralDfa26_0(active0, 0x400000008000L);
      case 114:
         return jjMoveStringLiteralDfa26_0(active0, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(24, active0);
}
private int jjMoveStringLiteralDfa26_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(24, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(25, active0);
      return 26;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa27_0(active0, 0x40L);
      case 72:
         return jjMoveStringLiteralDfa27_0(active0, 0x40000000L);
      case 97:
         return jjMoveStringLiteralDfa27_0(active0, 0x200L);
      case 99:
         return jjMoveStringLiteralDfa27_0(active0, 0x20000000L);
      case 101:
         return jjMoveStringLiteralDfa27_0(active0, 0x86000L);
      case 105:
         return jjMoveStringLiteralDfa27_0(active0, 0x800L);
      case 110:
         return jjMoveStringLiteralDfa27_0(active0, 0x48000L);
      case 111:
         return jjMoveStringLiteralDfa27_0(active0, 0x400008000080L);
      default :
         break;
   }
   return jjStartNfa_0(25, active0);
}
private int jjMoveStringLiteralDfa27_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(25, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(26, active0);
      return 27;
   }
   switch(curChar)
   {
      case 70:
         return jjMoveStringLiteralDfa28_0(active0, 0xc000L);
      case 101:
         return jjMoveStringLiteralDfa28_0(active0, 0x20042000L);
      case 105:
         return jjMoveStringLiteralDfa28_0(active0, 0x40000000L);
      case 108:
         return jjMoveStringLiteralDfa28_0(active0, 0x400000000800L);
      case 110:
         return jjMoveStringLiteralDfa28_0(active0, 0x8000080L);
      case 111:
         return jjMoveStringLiteralDfa28_0(active0, 0x40L);
      case 115:
         return jjMoveStringLiteralDfa28_0(active0, 0x80000L);
      case 116:
         return jjMoveStringLiteralDfa28_0(active0, 0x200L);
      default :
         break;
   }
   return jjStartNfa_0(26, active0);
}
private int jjMoveStringLiteralDfa28_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(26, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(27, active0);
      return 28;
   }
   switch(curChar)
   {
      case 70:
         return jjMoveStringLiteralDfa29_0(active0, 0x2000L);
      case 75:
         return jjMoveStringLiteralDfa29_0(active0, 0x400000000000L);
      case 97:
         return jjMoveStringLiteralDfa29_0(active0, 0x8000L);
      case 99:
         return jjMoveStringLiteralDfa29_0(active0, 0x8000000L);
      case 101:
         return jjMoveStringLiteralDfa29_0(active0, 0x200L);
      case 105:
         return jjMoveStringLiteralDfa29_0(active0, 0x4000L);
      case 110:
         return jjMoveStringLiteralDfa29_0(active0, 0x40000040L);
      case 112:
         return jjMoveStringLiteralDfa29_0(active0, 0x20000000L);
      case 115:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(28, 19, 10);
         return jjMoveStringLiteralDfa29_0(active0, 0x40080L);
      case 116:
         return jjMoveStringLiteralDfa29_0(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(27, active0);
}
private int jjMoveStringLiteralDfa29_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(27, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(28, active0);
      return 29;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa30_0(active0, 0x8000L);
      case 101:
         return jjMoveStringLiteralDfa30_0(active0, 0x8000800L);
      case 103:
         return jjMoveStringLiteralDfa30_0(active0, 0x200L);
      case 104:
         return jjMoveStringLiteralDfa30_0(active0, 0x80L);
      case 105:
         return jjMoveStringLiteralDfa30_0(active0, 0x400000002000L);
      case 108:
         return jjMoveStringLiteralDfa30_0(active0, 0x4000L);
      case 110:
         return jjMoveStringLiteralDfa30_0(active0, 0x40L);
      case 115:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(29, 18, 10);
         break;
      case 116:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(29, 29, 10);
         else if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(29, 30, 10);
         break;
      default :
         break;
   }
   return jjStartNfa_0(28, active0);
}
private int jjMoveStringLiteralDfa30_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(28, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(29, active0);
      return 30;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa31_0(active0, 0x40L);
      case 105:
         return jjMoveStringLiteralDfa31_0(active0, 0x80L);
      case 108:
         return jjMoveStringLiteralDfa31_0(active0, 0x2000L);
      case 111:
         return jjMoveStringLiteralDfa31_0(active0, 0x200L);
      case 112:
         return jjMoveStringLiteralDfa31_0(active0, 0x8000000L);
      case 114:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(30, 11, 10);
         break;
      case 116:
         return jjMoveStringLiteralDfa31_0(active0, 0x40000000c000L);
      default :
         break;
   }
   return jjStartNfa_0(29, active0);
}
private int jjMoveStringLiteralDfa31_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(29, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(30, active0);
      return 31;
   }
   switch(curChar)
   {
      case 66:
         return jjMoveStringLiteralDfa32_0(active0, 0x400000000000L);
      case 99:
         return jjMoveStringLiteralDfa32_0(active0, 0x40L);
      case 101:
         return jjMoveStringLiteralDfa32_0(active0, 0x4000L);
      case 111:
         return jjMoveStringLiteralDfa32_0(active0, 0x8000L);
      case 112:
         return jjMoveStringLiteralDfa32_0(active0, 0x80L);
      case 114:
         return jjMoveStringLiteralDfa32_0(active0, 0x200L);
      case 116:
         return jjMoveStringLiteralDfa32_0(active0, 0x8002000L);
      default :
         break;
   }
   return jjStartNfa_0(30, active0);
}
private int jjMoveStringLiteralDfa32_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(30, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(31, active0);
      return 32;
   }
   switch(curChar)
   {
      case 66:
         return jjMoveStringLiteralDfa33_0(active0, 0x80L);
      case 101:
         return jjMoveStringLiteralDfa33_0(active0, 0x2000L);
      case 114:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(32, 14, 10);
         else if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(32, 15, 10);
         break;
      case 115:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(32, 27, 10);
         break;
      case 116:
         return jjMoveStringLiteralDfa33_0(active0, 0x40L);
      case 117:
         return jjMoveStringLiteralDfa33_0(active0, 0x400000000000L);
      case 121:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(32, 9, 10);
         break;
      default :
         break;
   }
   return jjStartNfa_0(31, active0);
}
private int jjMoveStringLiteralDfa33_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(31, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(32, active0);
      return 33;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa34_0(active0, 0xc0L);
      case 103:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(33, 46, 10);
         break;
      case 114:
         return jjMoveStringLiteralDfa34_0(active0, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(32, active0);
}
private int jjMoveStringLiteralDfa34_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(32, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(33, active0);
      return 34;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa35_0(active0, 0x2000L);
      case 100:
         return jjMoveStringLiteralDfa35_0(active0, 0x40L);
      case 116:
         return jjMoveStringLiteralDfa35_0(active0, 0x80L);
      default :
         break;
   }
   return jjStartNfa_0(33, active0);
}
private int jjMoveStringLiteralDfa35_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(33, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(34, active0);
      return 35;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa36_0(active0, 0x40L);
      case 108:
         return jjMoveStringLiteralDfa36_0(active0, 0x2000L);
      case 119:
         return jjMoveStringLiteralDfa36_0(active0, 0x80L);
      default :
         break;
   }
   return jjStartNfa_0(34, active0);
}
private int jjMoveStringLiteralDfa36_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(34, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(35, active0);
      return 36;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa37_0(active0, 0x80L);
      case 103:
         return jjMoveStringLiteralDfa37_0(active0, 0x2000L);
      case 111:
         return jjMoveStringLiteralDfa37_0(active0, 0x40L);
      default :
         break;
   }
   return jjStartNfa_0(35, active0);
}
private int jjMoveStringLiteralDfa37_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(35, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(36, active0);
      return 37;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa38_0(active0, 0x80L);
      case 109:
         return jjMoveStringLiteralDfa38_0(active0, 0x40L);
      case 111:
         return jjMoveStringLiteralDfa38_0(active0, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(36, active0);
}
private int jjMoveStringLiteralDfa38_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(36, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(37, active0);
      return 38;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa39_0(active0, 0x80L);
      case 112:
         return jjMoveStringLiteralDfa39_0(active0, 0x40L);
      case 114:
         return jjMoveStringLiteralDfa39_0(active0, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(37, active0);
}
private int jjMoveStringLiteralDfa39_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(37, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(38, active0);
      return 39;
   }
   switch(curChar)
   {
      case 79:
         return jjMoveStringLiteralDfa40_0(active0, 0x80L);
      case 105:
         return jjMoveStringLiteralDfa40_0(active0, 0x2000L);
      case 111:
         return jjMoveStringLiteralDfa40_0(active0, 0x40L);
      default :
         break;
   }
   return jjStartNfa_0(38, active0);
}
private int jjMoveStringLiteralDfa40_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(38, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(39, active0);
      return 40;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa41_0(active0, 0x40L);
      case 114:
         return jjMoveStringLiteralDfa41_0(active0, 0x80L);
      case 116:
         return jjMoveStringLiteralDfa41_0(active0, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_0(39, active0);
}
private int jjMoveStringLiteralDfa41_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(39, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(40, active0);
      return 41;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa42_0(active0, 0x40L);
      case 104:
         return jjMoveStringLiteralDfa42_0(active0, 0x2000L);
      case 105:
         return jjMoveStringLiteralDfa42_0(active0, 0x80L);
      default :
         break;
   }
   return jjStartNfa_0(40, active0);
}
private int jjMoveStringLiteralDfa42_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(40, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(41, active0);
      return 42;
   }
   switch(curChar)
   {
      case 103:
         return jjMoveStringLiteralDfa43_0(active0, 0x80L);
      case 109:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(42, 13, 10);
         break;
      case 110:
         return jjMoveStringLiteralDfa43_0(active0, 0x40L);
      default :
         break;
   }
   return jjStartNfa_0(41, active0);
}
private int jjMoveStringLiteralDfa43_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(41, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(42, active0);
      return 43;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa44_0(active0, 0x80L);
      case 116:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(43, 6, 10);
         break;
      default :
         break;
   }
   return jjStartNfa_0(42, active0);
}
private int jjMoveStringLiteralDfa44_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(42, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(43, active0);
      return 44;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa45_0(active0, 0x80L);
      default :
         break;
   }
   return jjStartNfa_0(43, active0);
}
private int jjMoveStringLiteralDfa45_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(43, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(44, active0);
      return 45;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa46_0(active0, 0x80L);
      default :
         break;
   }
   return jjStartNfa_0(44, active0);
}
private int jjMoveStringLiteralDfa46_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(44, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(45, active0);
      return 46;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa47_0(active0, 0x80L);
      default :
         break;
   }
   return jjStartNfa_0(45, active0);
}
private int jjMoveStringLiteralDfa47_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(45, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(46, active0);
      return 47;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa48_0(active0, 0x80L);
      default :
         break;
   }
   return jjStartNfa_0(46, active0);
}
private int jjMoveStringLiteralDfa48_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(46, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(47, active0);
      return 48;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa49_0(active0, 0x80L);
      default :
         break;
   }
   return jjStartNfa_0(47, active0);
}
private int jjMoveStringLiteralDfa49_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(47, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(48, active0);
      return 49;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa50_0(active0, 0x80L);
      default :
         break;
   }
   return jjStartNfa_0(48, active0);
}
private int jjMoveStringLiteralDfa50_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(48, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(49, active0);
      return 50;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa51_0(active0, 0x80L);
      default :
         break;
   }
   return jjStartNfa_0(49, active0);
}
private int jjMoveStringLiteralDfa51_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(49, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(50, active0);
      return 51;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa52_0(active0, 0x80L);
      default :
         break;
   }
   return jjStartNfa_0(50, active0);
}
private int jjMoveStringLiteralDfa52_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(50, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(51, active0);
      return 52;
   }
   switch(curChar)
   {
      case 112:
         return jjMoveStringLiteralDfa53_0(active0, 0x80L);
      default :
         break;
   }
   return jjStartNfa_0(51, active0);
}
private int jjMoveStringLiteralDfa53_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(51, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(52, active0);
      return 53;
   }
   switch(curChar)
   {
      case 116:
         return jjMoveStringLiteralDfa54_0(active0, 0x80L);
      default :
         break;
   }
   return jjStartNfa_0(52, active0);
}
private int jjMoveStringLiteralDfa54_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(52, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(53, active0);
      return 54;
   }
   switch(curChar)
   {
      case 115:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(54, 7, 10);
         break;
      default :
         break;
   }
   return jjStartNfa_0(53, active0);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 9;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 9:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(0, 1);
                  else if (curChar == 61)
                  {
                     if (kind > 48)
                        kind = 48;
                     jjCheckNAdd(2);
                  }
                  break;
               case 10:
                  if ((0x7ffe08900000000L & l) != 0L)
                     jjCheckNAddTwoStates(6, 7);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 55)
                        kind = 55;
                  }
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 55)
                        kind = 55;
                     jjCheckNAddTwoStates(6, 7);
                  }
                  else if ((0x800100000000000L & l) != 0L)
                  {
                     if (kind > 56)
                        kind = 56;
                     jjCheckNAdd(8);
                  }
                  else if ((0x2400L & l) != 0L)
                  {
                     if (kind > 49)
                        kind = 49;
                     jjCheckNAdd(3);
                  }
                  else if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(0, 1);
                  else if (curChar == 61)
                  {
                     if (kind > 48)
                        kind = 48;
                     jjCheckNAdd(2);
                  }
                  if (curChar == 9)
                  {
                     if (kind > 50)
                        kind = 50;
                     jjCheckNAdd(4);
                  }
                  break;
               case 0:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(0, 1);
                  break;
               case 1:
                  if (curChar != 61)
                     break;
                  kind = 48;
                  jjCheckNAdd(2);
                  break;
               case 2:
                  if ((0x100000200L & l) == 0L)
                     break;
                  if (kind > 48)
                     kind = 48;
                  jjCheckNAdd(2);
                  break;
               case 3:
                  if ((0x2400L & l) == 0L)
                     break;
                  kind = 49;
                  jjCheckNAdd(3);
                  break;
               case 4:
                  if (curChar != 9)
                     break;
                  if (kind > 50)
                     kind = 50;
                  jjCheckNAdd(4);
                  break;
               case 6:
                  if ((0x7ffe08900000000L & l) != 0L)
                     jjCheckNAddTwoStates(6, 7);
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) != 0L && kind > 55)
                     kind = 55;
                  break;
               case 8:
                  if ((0x800100000000000L & l) == 0L)
                     break;
                  kind = 56;
                  jjCheckNAdd(8);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 10:
                  if ((0x7fffffe97fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(6, 7);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 55)
                        kind = 55;
                  }
                  break;
               case 5:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 55)
                     kind = 55;
                  jjCheckNAddTwoStates(6, 7);
                  break;
               case 6:
                  if ((0x7fffffe97fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(6, 7);
                  break;
               case 7:
                  if ((0x7fffffe07fffffeL & l) != 0L && kind > 55)
                     kind = 55;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 9 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 10:
         return jjStopAtPos(0, 2);
      default :
         return 1;
   }
}
static final int[] jjnextStates = {
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, 
"\156\165\155\142\145\162\106\151\154\145\125\163\145\162", "\156\141\155\145\125\163\145\162\124\145\162\155\163\106\151\154\145", 
"\155\151\156\111\164\145\162\141\164\151\157\156\124\157\126\145\162\151\146\171\125\156\151\161\165\145\103\157\156\156\145\143\164\145\144\103\157\155\160\157\156\145\156\164", 
"\155\151\156\111\164\145\162\141\164\151\157\156\124\157\126\145\162\151\146\171\122\145\154\141\164\151\157\156\163\150\151\160\102\145\164\167\145\145\156\117\162\151\147\151\156\141\154\103\157\156\143\145\160\164\163", "\155\141\170\111\164\145\162\141\164\151\157\156", 
"\141\144\144\151\164\151\157\156\116\145\167\103\157\156\143\145\160\164\127\151\164\150\157\165\164\103\141\164\145\147\157\162\171", "\153\103\157\162\145\106\151\154\164\145\162", 
"\161\165\141\156\164\151\164\171\116\157\144\145\163\124\157\101\160\160\154\171\113\143\157\162\145\106\151\154\164\145\162", "\156\104\145\147\162\145\145\106\151\154\164\145\162", 
"\151\164\145\162\141\164\151\157\156\124\162\151\147\147\145\162\101\160\160\154\171\116\104\145\147\162\145\145\106\151\154\164\145\162\101\154\147\157\162\151\164\150\155", 
"\161\165\141\156\164\151\164\171\116\157\144\145\163\124\157\101\160\160\154\171\116\144\145\147\162\145\145\106\151\154\164\145\162", 
"\143\157\156\143\145\160\164\163\121\165\141\156\164\151\164\171\103\141\154\143\165\154\141\164\151\157\156\106\141\143\164\157\162", 
"\143\157\156\143\145\160\164\163\115\151\156\115\141\170\122\141\156\147\145", 
"\160\162\157\160\157\162\143\151\157\156\102\145\164\167\145\145\156\156\145\163\163", 
"\160\162\157\160\157\162\143\151\157\156\102\145\164\167\145\145\156\156\145\163\163\103\154\157\163\145\156\145\163\163", 
"\160\162\145\143\151\163\151\157\156\102\145\164\167\145\145\156\156\145\163\163\103\154\157\163\145\156\145\163\163", 
"\155\141\170\102\145\164\167\145\145\156\156\145\163\163\103\154\157\163\145\156\145\163\163", 
"\160\162\157\160\157\162\143\151\157\156\105\151\147\145\156\166\145\143\164\157\162", 
"\160\162\145\143\151\163\151\157\156\105\151\147\145\156\166\145\143\164\157\162", "\155\141\170\105\151\147\145\156\166\145\143\164\157\162", 
"\151\163\102\145\164\167\145\145\156\156\145\163\163\103\154\157\163\145\156\145\163\163", "\151\163\105\151\147\145\156\166\145\143\164\157\162", 
"\151\163\123\145\154\145\143\164\145\144", 
"\151\163\113\145\145\160\116\145\151\147\150\142\157\162\163\117\146\117\162\151\147\151\156\141\154\103\157\156\143\145\160\164\163", 
"\161\165\141\156\164\151\164\171\116\157\144\145\163\123\150\157\162\164\122\145\160\157\162\164", 
"\142\141\143\153\107\162\157\165\156\144\143\157\154\157\162\117\162\151\147\151\156\141\154\103\157\156\143\145\160\164", 
"\142\157\162\144\145\162\124\150\151\143\153\156\145\163\163\103\157\156\143\145\160\164\127\151\164\150\110\151\156\164", "\156\141\155\145\107\145\170\146\107\162\141\160\150\106\151\154\145", 
"\156\141\155\145\121\165\145\162\171\104\145\146\141\165\154\164\106\151\154\145", "\156\141\155\145\126\157\143\141\142\165\154\141\162\171\106\151\154\145", 
"\156\141\155\145\125\163\145\154\145\163\163\103\157\156\143\145\160\164\163\106\151\154\145", 
"\156\141\155\145\124\170\164\103\157\156\143\145\160\164\115\141\160\106\151\154\145", 
"\156\141\155\145\103\170\154\103\157\156\143\145\160\164\115\141\160\106\151\154\145", 
"\156\141\155\145\103\157\155\160\154\145\164\145\122\145\160\157\162\164\106\151\154\145", 
"\156\141\155\145\123\150\157\162\164\122\145\160\157\162\164\106\151\154\145", 
"\156\141\155\145\103\157\156\163\157\154\145\122\145\160\157\162\164\106\151\154\145", 
"\156\141\155\145\103\157\156\163\157\154\145\105\162\162\157\162\106\151\154\145", 
"\144\151\162\122\144\146\163\120\145\162\163\151\163\164\145\156\143\145\106\151\154\145\163", "\144\142\160\145\144\151\141\123\145\162\166\145\162", 
"\147\145\160\150\151\126\151\163\165\141\154\151\172\141\164\151\157\156", 
"\147\162\141\160\150\123\164\162\145\141\155\126\151\163\165\141\154\151\172\141\164\151\157\156", 
"\151\163\106\151\170\102\165\147\111\156\107\145\160\150\151\124\157\157\154\113\151\164", 
"\157\162\151\147\151\156\141\154\103\157\156\143\145\160\164\127\151\164\150\107\145\160\150\151\124\157\157\154\113\151\164\102\165\147", 
"\151\163\105\156\141\142\154\145\125\163\145\154\145\163\163\124\141\142\154\145", null, null, null, "\40", "\55\76", null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "comentario_final",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0x19ffffffffffff1L, 
};
static final long[] jjtoSkip = {
   0xeL, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[9];
private final int[] jjstateSet = new int[18];
protected char curChar;
/** Constructor. */
public WraptermsTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public WraptermsTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 9; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 2 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   switch(curLexState)
   {
     case 0:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       break;
     case 1:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       if (jjmatchedPos == 0 && jjmatchedKind > 3)
       {
          jjmatchedKind = 3;
       }
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

}
