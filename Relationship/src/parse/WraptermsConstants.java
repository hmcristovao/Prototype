/* Generated By:JavaCC: Do not edit this line. WraptermsConstants.java */
package parse;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface WraptermsConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int T_numberFileUser = 4;
  /** RegularExpression Id. */
  int T_nameUserTermsFile = 5;
  /** RegularExpression Id. */
  int T_minIterationToVerifyUniqueConnectedComponent = 6;
  /** RegularExpression Id. */
  int T_minIterationToVerifyRelationshipBetweenOriginalConcepts = 7;
  /** RegularExpression Id. */
  int T_maxIteration = 8;
  /** RegularExpression Id. */
  int T_additionNewConceptWithoutCategory = 9;
  /** RegularExpression Id. */
  int T_kCoreFilter = 10;
  /** RegularExpression Id. */
  int T_quantityNodesToApplyKcoreFilter = 11;
  /** RegularExpression Id. */
  int T_nDegreeFilter = 12;
  /** RegularExpression Id. */
  int T_iterationTriggerApplyNDegreeFilterAlgorithm = 13;
  /** RegularExpression Id. */
  int T_quantityNodesToApplyNdegreeFilter = 14;
  /** RegularExpression Id. */
  int T_conceptsQuantityCalculationFactor = 15;
  /** RegularExpression Id. */
  int T_conceptsMinMaxRange = 16;
  /** RegularExpression Id. */
  int T_proporcionBetweenness = 17;
  /** RegularExpression Id. */
  int T_proporcionBetweennessCloseness = 18;
  /** RegularExpression Id. */
  int T_precisionBetweennessCloseness = 19;
  /** RegularExpression Id. */
  int T_maxBetweennessCloseness = 20;
  /** RegularExpression Id. */
  int T_proporcionEigenvector = 21;
  /** RegularExpression Id. */
  int T_precisionEigenvector = 22;
  /** RegularExpression Id. */
  int T_maxEigenvector = 23;
  /** RegularExpression Id. */
  int T_isBetweennessCloseness = 24;
  /** RegularExpression Id. */
  int T_isEigenvector = 25;
  /** RegularExpression Id. */
  int T_isSelected = 26;
  /** RegularExpression Id. */
  int T_isKeepNeighborsOfOriginalConcepts = 27;
  /** RegularExpression Id. */
  int T_quantityNodesShortReport = 28;
  /** RegularExpression Id. */
  int T_backGroundcolorOriginalConcept = 29;
  /** RegularExpression Id. */
  int T_borderThicknessConceptWithHint = 30;
  /** RegularExpression Id. */
  int T_nameGexfGraphFile = 31;
  /** RegularExpression Id. */
  int T_nameQueryDefaultFile = 32;
  /** RegularExpression Id. */
  int T_nameVocabularyFile = 33;
  /** RegularExpression Id. */
  int T_nameUselessConceptsFile = 34;
  /** RegularExpression Id. */
  int T_nameTxtConceptMapFile = 35;
  /** RegularExpression Id. */
  int T_nameCxlConceptMapFile = 36;
  /** RegularExpression Id. */
  int T_nameCompleteReportFile = 37;
  /** RegularExpression Id. */
  int T_nameShortReportFile = 38;
  /** RegularExpression Id. */
  int T_nameConsoleReportFile = 39;
  /** RegularExpression Id. */
  int T_nameConsoleErrorFile = 40;
  /** RegularExpression Id. */
  int T_dirRdfsPersistenceFiles = 41;
  /** RegularExpression Id. */
  int T_dbpediaServer = 42;
  /** RegularExpression Id. */
  int T_gephiVisualization = 43;
  /** RegularExpression Id. */
  int T_graphStreamVisualization = 44;
  /** RegularExpression Id. */
  int T_isFixBugInGephiToolKit = 45;
  /** RegularExpression Id. */
  int T_originalConceptWithGephiToolKitBug = 46;
  /** RegularExpression Id. */
  int T_isEnableUselessTable = 47;
  /** RegularExpression Id. */
  int EQUALS = 48;
  /** RegularExpression Id. */
  int NEW_LINE = 49;
  /** RegularExpression Id. */
  int TAB = 50;
  /** RegularExpression Id. */
  int BLANK = 51;
  /** RegularExpression Id. */
  int ARROW = 52;
  /** RegularExpression Id. */
  int COMMON_CHARACTER = 53;
  /** RegularExpression Id. */
  int SPECIAL_CHARACTER = 54;
  /** RegularExpression Id. */
  int TERM = 55;
  /** RegularExpression Id. */
  int SEPARATORS = 56;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int comentario_final = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\"//\"",
    "\"\\n\"",
    "<token of kind 3>",
    "\"numberFileUser\"",
    "\"nameUserTermsFile\"",
    "\"minIterationToVerifyUniqueConnectedComponent\"",
    "\"minIterationToVerifyRelationshipBetweenOriginalConcepts\"",
    "\"maxIteration\"",
    "\"additionNewConceptWithoutCategory\"",
    "\"kCoreFilter\"",
    "\"quantityNodesToApplyKcoreFilter\"",
    "\"nDegreeFilter\"",
    "\"iterationTriggerApplyNDegreeFilterAlgorithm\"",
    "\"quantityNodesToApplyNdegreeFilter\"",
    "\"conceptsQuantityCalculationFactor\"",
    "\"conceptsMinMaxRange\"",
    "\"proporcionBetweenness\"",
    "\"proporcionBetweennessCloseness\"",
    "\"precisionBetweennessCloseness\"",
    "\"maxBetweennessCloseness\"",
    "\"proporcionEigenvector\"",
    "\"precisionEigenvector\"",
    "\"maxEigenvector\"",
    "\"isBetweennessCloseness\"",
    "\"isEigenvector\"",
    "\"isSelected\"",
    "\"isKeepNeighborsOfOriginalConcepts\"",
    "\"quantityNodesShortReport\"",
    "\"backGroundcolorOriginalConcept\"",
    "\"borderThicknessConceptWithHint\"",
    "\"nameGexfGraphFile\"",
    "\"nameQueryDefaultFile\"",
    "\"nameVocabularyFile\"",
    "\"nameUselessConceptsFile\"",
    "\"nameTxtConceptMapFile\"",
    "\"nameCxlConceptMapFile\"",
    "\"nameCompleteReportFile\"",
    "\"nameShortReportFile\"",
    "\"nameConsoleReportFile\"",
    "\"nameConsoleErrorFile\"",
    "\"dirRdfsPersistenceFiles\"",
    "\"dbpediaServer\"",
    "\"gephiVisualization\"",
    "\"graphStreamVisualization\"",
    "\"isFixBugInGephiToolKit\"",
    "\"originalConceptWithGephiToolKitBug\"",
    "\"isEnableUselessTable\"",
    "<EQUALS>",
    "<NEW_LINE>",
    "<TAB>",
    "\" \"",
    "\"->\"",
    "<COMMON_CHARACTER>",
    "<SPECIAL_CHARACTER>",
    "<TERM>",
    "<SEPARATORS>",
  };

}
